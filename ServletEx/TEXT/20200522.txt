+ 서블릿의 동작 원리

      클라이언트 요청 -> Apache Tomcat 서버 ( WEB 서버 + WAS 서버 )
      
      ->  서블릿 컨테이너 -> 서블릿 객체
      
      ->  service() 호출 -> doGet() 또는 doPost() 호출
      
      ->  서블릿 컨테이너 -> Apache Tomcat 서버 -> 클라이언트 응답
      
      
+ 서블릿 컨테이너, Servlet Container

 - 서블릿 처리(동작) 환경을 구축하는 역할
 
 - 서블릿을 생성하고 실행시켜주는 역할을 수행한다
 
 - WAS 서버와 서블릿 객체 사이의 중간다리 역할을 수행한다
 
 - HttpServletRequest (HTTP요청객체), HttpServletResponse(HTTP응답 객체) 
  두 가지를 생성하여 서블릿에 전달한다
  
  - 요청 URL - Pattern과 서블릿 객체를 1:1로 매핑해놓고 요청을 기다린다
  
  
+ 서블릿 라이프 사이클( 생명주기 ) - 싱글톤처리 ( 객체 하나에 서비스 메소드 ) 

 객체생성     -> init() 실행  ->  service() 실행     -> destroy() 실행
(생성자호출)    (서블릿초기화)   (doGet(), doPost()      (서버 종료)
                                    반복적으로 실행)
- 객체초기화    
      
      
- 객체 생성 : 서블릿 객체가 처음으로 사용될 때 수행한다( URL 요청 )

- init() : 서블릿 객체가 처음 생성된 이휴 바로 호출된다

- service() : 처음 객체 생성될 때를 포함하여 매 URL 요청마다 수행된다

- destory() : 서버가 종료되는 시점에 호출된다


** 서버가 켜진 후 처음으로 서블릿을 사용할 때 ( 첫 요청에 반응할 때 )

        객체 생성 - init() - service() - 응답 순으로 수행한다
        
** 객체가 생성된 이휴 서블릿을 사용할 때 ( 요청이 처음이 아닐 때 )

        service() - 응답 순으로 수행한다
        
        
